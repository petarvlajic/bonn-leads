// providers/auth-provider.tsx
import React, { createContext, useState, useContext, useEffect } from 'react';
import { router } from 'expo-router';
import { AuthState, User } from '../types';

// Default auth state
const defaultAuthState: AuthState = {
  isAuthenticated: false,
  user: null,
  loading: true,
  error: null,
};

// Create context
const AuthContext = createContext<{
  authState: AuthState;
  login: (email: string, password: string) => Promise<void>;
  register: (userData: Partial<User>, password: string) => Promise<void>;
  logout: () => void;
  updateUserProfile: (userData: Partial<User>) => Promise<void>;
}>({
  authState: defaultAuthState,
  login: async () => {
    router.replace('../(app)/home');
  },
  register: async () => {},
  logout: () => {},
  updateUserProfile: async () => {},
});

// Mock user data for demo
const mockUser: User = {
  id: '1',
  firstName: 'Emma',
  lastName: 'Johnson',
  email: 'emma.johnson@example.com',
  phoneNumber: '+1234567890',
  role: 'Admin',
  profileImage: 'https://example.com/profile.jpg',
};

export function useAuth() {
  return useContext(AuthContext);
}

export default function AuthProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [authState, setAuthState] = useState<AuthState>(defaultAuthState);

  // Check for existing session on mount
  useEffect(() => {
    const checkAuth = async () => {
      try {
        // In a real app, you would check for a token in secure storage
        // and validate it with your backend

        // For demo purposes, we'll just set loading to false
        setAuthState({
          isAuthenticated: false,
          user: null,
          loading: false,
          error: null,
        });
      } catch (error) {
        setAuthState({
          isAuthenticated: false,
          user: null,
          loading: false,
          error: 'Failed to restore authentication state',
        });
      }
    };

    checkAuth();
  }, []);

  // Login function
  const login = async (email: string, password: string) => {
    try {
      setAuthState((prev) => ({ ...prev, loading: true, error: null }));

      // In a real app, you would make an API call here
      // For demo purposes, we'll simulate a successful login

      // Simulate API delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Check credentials (mock)
      if (email === 'test@gmail.com' && password === '123') {
        setAuthState({
          isAuthenticated: true,
          user: mockUser,
          loading: false,
          error: null,
        });

        // Navigate to main app
        router.replace('../(app)/home');
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (error: any) {
      setAuthState((prev) => ({
        ...prev,
        loading: false,
        error: error.message || 'Login failed',
      }));
    }
  };

  // Register function
  const register = async (userData: Partial<User>, password: string) => {
    try {
      setAuthState((prev) => ({ ...prev, loading: true, error: null }));

      // In a real app, you would make an API call here
      // For demo purposes, we'll simulate a successful registration

      // Simulate API delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Create new user (mock)
      const newUser: User = {
        id: '2', // Would be generated by backend
        firstName: userData.firstName || '',
        lastName: userData.lastName || '',
        email: userData.email || '',
        phoneNumber: userData.phoneNumber || '',
        role: 'User',
      };

      setAuthState({
        isAuthenticated: true,
        user: newUser,
        loading: false,
        error: null,
      });

      // Navigate to main app
      router.replace('../(app)/home');
    } catch (error: any) {
      setAuthState((prev) => ({
        ...prev,
        loading: false,
        error: error.message || 'Registration failed',
      }));
    }
  };

  // Logout function
  const logout = () => {
    // In a real app, you would clear token from secure storage
    // and make an API call to invalidate the token on the server

    setAuthState({
      isAuthenticated: false,
      user: null,
      loading: false,
      error: null,
    });

    // Navigate to welcome screen
    router.replace('../');
  };

  // Update user profile
  const updateUserProfile = async (userData: Partial<User>) => {
    try {
      setAuthState((prev) => ({ ...prev, loading: true, error: null }));

      // In a real app, you would make an API call here
      // For demo purposes, we'll simulate a successful update

      // Simulate API delay
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Update user data (mock)
      if (authState.user) {
        const updatedUser: User = {
          ...authState.user,
          ...userData,
        };

        setAuthState({
          isAuthenticated: true,
          user: updatedUser,
          loading: false,
          error: null,
        });
      }
    } catch (error: any) {
      setAuthState((prev) => ({
        ...prev,
        loading: false,
        error: error.message || 'Failed to update profile',
      }));
    }
  };

  return (
    <AuthContext.Provider
      value={{
        authState,
        login,
        register,
        logout,
        updateUserProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}
